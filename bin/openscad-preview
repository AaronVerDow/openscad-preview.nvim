#!/usr/bin/env bash
set -euo pipefail

[ -z "${OPENSCAD_CACHE:-}" ] && OPENSCAD_CACHE="/tmp/openscad"
mkdir -p "$OPENSCAD_CACHE"
PIDFILE="$OPENSCAD_CACHE/${VIM_PID:-last}.pid"

process_all_comments() {
    local file=$1

    local module=""

    # track if preview is found
    local return_value=1

    # read file in reverse
    while read -r line; do
        
        # remember name of last module
        maybe=$( echo "$line" | grep -E '^\s*module ' | sed 's/\s*module\s*//' | grep -E -o '^[^(]*' ) || true
        [ -z "$maybe" ] || module="$maybe"

        # skip lines until PREVIEW hit
        echo "$line" | grep -q 'PREVIEW' || continue
        return_value=0

        # delete everything leading up to PREVIEW
        args=${line#*PREVIEW}

        # build temporary scad file to call module
        basename=$( basename "$file" )
        output="$OPENSCAD_CACHE/${basename%.*}_$module.scad"
        build_scad "$file" "$module" "$output" "$args"

        # run command
        open_file "$output" &

    done < <( tac "$file" )
    return $return_value
}

open_file() {
    start_once "${OPENSCAD_EXECUTABLE:-openscad}" "$1" &
}

start_once() {
    pgrep -f "$*" > /dev/null && return 0
    nohup "$@" &
    echo $! >> "$PIDFILE"
}

build_scad() {
    file=$1
    shift
    module=$1
    shift
    output=$1
    shift

    output_dir=$( dirname "$output" )
    relative_file=$( realpath -m "$file" --relative-to="$output_dir" )

    echo "use <$relative_file>; $module($*);" > "$output"
}

fail() {
    echo "$*" 1>&2
    exit 1
}

main() {
    if [ "$1" == "--kill" ]; then
        [ -e "$PIDFILE" ] || return 1
        xargs kill < "$PIDFILE"
        return 0
    fi

    file=$1

    [ "$file" ] || fail "File not specified"
    [ "${2:-}" ] && fail "Too many options"
    [ -f "$file" ] || fail "File does not exist"
    echo "$file" | grep -q '\.scad$' || fail "Not an scad file"

    grep -q NOPREVIEW "$file" && return

    # Do a quick check for PREVIEW to speed up launch
    if grep -q PREVIEW "$file"; then
        process_all_comments "$file" || open_file "$file"
    else
        open_file "$file"
    fi
}

main "${@:-}"
